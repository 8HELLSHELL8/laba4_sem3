{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Моковые данные пользователей (в реальном приложении это будет запрос к API)\nconst mockUsers = [{\n  id: 1,\n  email: 'user',\n  password: 'password123'\n}, {\n  id: 2,\n  email: 'admin',\n  password: 'admin123'\n}];\nexport function useAuth() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Проверяем наличие данных пользователя в sessionStorage\n    const userData = sessionStorage.getItem('user');\n    if (userData) {\n      setCurrentUser(JSON.parse(userData));\n      setIsAuthenticated(true);\n    }\n  }, []);\n  const login = (email, password) => {\n    // Ищем пользователя в моковых данных\n    const user = mockUsers.find(user => user.email === email && user.password === password);\n    if (user) {\n      // Сохраняем данные пользователя в sessionStorage\n      const userData = {\n        id: user.id,\n        email: user.email\n      };\n      sessionStorage.setItem('user', JSON.stringify(userData));\n      setCurrentUser(userData);\n      setIsAuthenticated(true);\n      navigate('/dashboard');\n      return {\n        success: true\n      };\n    } else {\n      return {\n        success: false,\n        error: 'Неверный email или пароль'\n      };\n    }\n  };\n  const logout = () => {\n    sessionStorage.removeItem('user');\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n    navigate('/auth');\n  };\n  return {\n    isAuthenticated,\n    currentUser,\n    login,\n    logout\n  };\n}\n_s(useAuth, \"pHzT72yOVCZlB876IPxGDWHBKSU=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","mockUsers","id","email","password","useAuth","_s","isAuthenticated","setIsAuthenticated","currentUser","setCurrentUser","navigate","userData","sessionStorage","getItem","JSON","parse","login","user","find","setItem","stringify","success","error","logout","removeItem"],"sources":["/home/anton/laba4/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Моковые данные пользователей (в реальном приложении это будет запрос к API)\nconst mockUsers = [\n  { id: 1, email: 'user', password: 'password123' },\n  { id: 2, email: 'admin', password: 'admin123' }\n];\n\nexport function useAuth() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Проверяем наличие данных пользователя в sessionStorage\n    const userData = sessionStorage.getItem('user');\n    if (userData) {\n      setCurrentUser(JSON.parse(userData));\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const login = (email, password) => {\n    // Ищем пользователя в моковых данных\n    const user = mockUsers.find(\n      user => user.email === email && user.password === password\n    );\n\n    if (user) {\n      // Сохраняем данные пользователя в sessionStorage\n      const userData = { id: user.id, email: user.email };\n      sessionStorage.setItem('user', JSON.stringify(userData));\n      setCurrentUser(userData);\n      setIsAuthenticated(true);\n      navigate('/dashboard');\n      return { success: true };\n    } else {\n      return { \n        success: false, \n        error: 'Неверный email или пароль' \n      };\n    }\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem('user');\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n    navigate('/auth');\n  };\n\n  return { \n    isAuthenticated, \n    currentUser, \n    login, \n    logout \n  };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,SAAS,GAAG,CAChB;EAAEC,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,MAAM;EAAEC,QAAQ,EAAE;AAAc,CAAC,EACjD;EAAEF,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,OAAO;EAAEC,QAAQ,EAAE;AAAW,CAAC,CAChD;AAED,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMa,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,QAAQ,GAAGC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,QAAQ,EAAE;MACZF,cAAc,CAACK,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,CAAC;MACpCJ,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,KAAK,GAAGA,CAACd,KAAK,EAAEC,QAAQ,KAAK;IACjC;IACA,MAAMc,IAAI,GAAGjB,SAAS,CAACkB,IAAI,CACzBD,IAAI,IAAIA,IAAI,CAACf,KAAK,KAAKA,KAAK,IAAIe,IAAI,CAACd,QAAQ,KAAKA,QACpD,CAAC;IAED,IAAIc,IAAI,EAAE;MACR;MACA,MAAMN,QAAQ,GAAG;QAAEV,EAAE,EAAEgB,IAAI,CAAChB,EAAE;QAAEC,KAAK,EAAEe,IAAI,CAACf;MAAM,CAAC;MACnDU,cAAc,CAACO,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACM,SAAS,CAACT,QAAQ,CAAC,CAAC;MACxDF,cAAc,CAACE,QAAQ,CAAC;MACxBJ,kBAAkB,CAAC,IAAI,CAAC;MACxBG,QAAQ,CAAC,YAAY,CAAC;MACtB,OAAO;QAAEW,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,MAAM;MACL,OAAO;QACLA,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE;MACT,CAAC;IACH;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBX,cAAc,CAACY,UAAU,CAAC,MAAM,CAAC;IACjCf,cAAc,CAAC,IAAI,CAAC;IACpBF,kBAAkB,CAAC,KAAK,CAAC;IACzBG,QAAQ,CAAC,OAAO,CAAC;EACnB,CAAC;EAED,OAAO;IACLJ,eAAe;IACfE,WAAW;IACXQ,KAAK;IACLO;EACF,CAAC;AACH;AAAClB,EAAA,CAjDeD,OAAO;EAAA,QAGJL,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}