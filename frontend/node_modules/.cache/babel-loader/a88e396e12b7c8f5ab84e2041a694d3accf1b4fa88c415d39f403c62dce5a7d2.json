{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nexport function useAuth() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  // Восстановление состояния после перезагрузки страницы\n  useEffect(() => {\n    const userData = sessionStorage.getItem('user');\n    if (userData) {\n      setCurrentUser(JSON.parse(userData));\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  // Логика входа через API\n  const login = async (username, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: username,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        return {\n          success: false,\n          error: errorData.message || 'Invalid credentials'\n        };\n      }\n      const data = await response.json();\n      sessionStorage.setItem('user', JSON.stringify(data.user)); // Сохраняем данные пользователя\n      setCurrentUser(data.user);\n      setIsAuthenticated(true);\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'An unexpected error occurred'\n      };\n    }\n  };\n\n  // Логика выхода\n  const logout = () => {\n    sessionStorage.removeItem('user'); // Удаляем данные из sessionStorage\n    setCurrentUser(null); // Сбрасываем currentUser\n    setIsAuthenticated(false); // Сбрасываем isAuthenticated\n  };\n  return {\n    isAuthenticated,\n    currentUser,\n    login,\n    logout\n  };\n}\n_s(useAuth, \"LJz3imMVe3CrUIKyplgcEyBQ50A=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","useAuth","_s","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","navigate","userData","sessionStorage","getItem","JSON","parse","login","username","password","response","fetch","method","headers","body","stringify","name","ok","errorData","json","success","error","message","data","setItem","user","logout","removeItem"],"sources":["/home/anton/laba4/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport function useAuth() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  // Восстановление состояния после перезагрузки страницы\n  useEffect(() => {\n    const userData = sessionStorage.getItem('user');\n    if (userData) {\n      setCurrentUser(JSON.parse(userData));\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  // Логика входа через API\n  const login = async (username, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: username, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        return { success: false, error: errorData.message || 'Invalid credentials' };\n      }\n\n      const data = await response.json();\n      sessionStorage.setItem('user', JSON.stringify(data.user)); // Сохраняем данные пользователя\n      setCurrentUser(data.user);\n      setIsAuthenticated(true);\n      return { success: true };\n    } catch (error) {\n      return { success: false, error: 'An unexpected error occurred' };\n    }\n  };\n\n  // Логика выхода\n  const logout = () => {\n    sessionStorage.removeItem('user'); // Удаляем данные из sessionStorage\n    setCurrentUser(null); // Сбрасываем currentUser\n    setIsAuthenticated(false); // Сбрасываем isAuthenticated\n  };\n\n  return {\n    isAuthenticated,\n    currentUser,\n    login,\n    logout,\n  };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMS,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACd,MAAMS,QAAQ,GAAGC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,QAAQ,EAAE;MACZJ,cAAc,CAACO,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,CAAC;MACpCF,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAET,IAAI,CAACU,SAAS,CAAC;UAAEC,IAAI,EAAER,QAAQ;UAAEC;QAAS,CAAC;MACnD,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvC,OAAO;UAAEC,OAAO,EAAE,KAAK;UAAEC,KAAK,EAAEH,SAAS,CAACI,OAAO,IAAI;QAAsB,CAAC;MAC9E;MAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClChB,cAAc,CAACqB,OAAO,CAAC,MAAM,EAAEnB,IAAI,CAACU,SAAS,CAACQ,IAAI,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;MAC3D3B,cAAc,CAACyB,IAAI,CAACE,IAAI,CAAC;MACzBzB,kBAAkB,CAAC,IAAI,CAAC;MACxB,OAAO;QAAEoB,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAA+B,CAAC;IAClE;EACF,CAAC;;EAED;EACA,MAAMK,MAAM,GAAGA,CAAA,KAAM;IACnBvB,cAAc,CAACwB,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACnC7B,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IACtBE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7B,CAAC;EAED,OAAO;IACLD,eAAe;IACfF,WAAW;IACXU,KAAK;IACLmB;EACF,CAAC;AACH;AAAC9B,EAAA,CArDeD,OAAO;EAAA,QAGJD,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}