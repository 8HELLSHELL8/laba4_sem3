{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nexport function useAuth() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  // Восстановление состояния после перезагрузки страницы\n  useEffect(() => {\n    const userData = sessionStorage.getItem('user');\n    if (userData) {\n      try {\n        // Попытка распарсить данные из sessionStorage\n        const parsedData = JSON.parse(userData);\n\n        // Проверяем, что данные содержат необходимые поля\n        if (parsedData && typeof parsedData === 'object' && parsedData.id && parsedData.name) {\n          setCurrentUser(parsedData);\n          setIsAuthenticated(true);\n        } else {\n          console.error('Invalid user data in sessionStorage:', parsedData);\n          sessionStorage.removeItem('user'); // Удаляем поврежденные данные\n        }\n      } catch (error) {\n        console.error('Failed to parse user data from sessionStorage:', error);\n        sessionStorage.removeItem('user'); // Удаляем поврежденные данные\n      }\n    }\n  }, []);\n\n  // Логика входа через API\n  const login = async (username, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: username,\n          password\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        return {\n          success: false,\n          error: errorData.message || 'Invalid credentials'\n        };\n      }\n      const data = await response.json();\n\n      // Проверяем, что сервер вернул корректные данные\n      if (data.user && typeof data.user === 'object' && data.user.id && data.user.name) {\n        sessionStorage.setItem('user', JSON.stringify(data.user)); // Сохраняем данные пользователя\n        setCurrentUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        console.error('Invalid user data received from server:', data);\n        return {\n          success: false,\n          error: 'Server returned invalid data'\n        };\n      }\n    } catch (error) {\n      console.error('An unexpected error occurred during login:', error);\n      return {\n        success: false,\n        error: 'An unexpected error occurred'\n      };\n    }\n  };\n\n  // Логика выхода\n  const logout = () => {\n    sessionStorage.removeItem('user'); // Удаляем данные из sessionStorage\n    setCurrentUser(null); // Сбрасываем currentUser\n    setIsAuthenticated(false); // Сбрасываем isAuthenticated\n    navigate('/auth'); // Перенаправляем на страницу входа\n  };\n  return {\n    isAuthenticated,\n    currentUser,\n    login,\n    logout\n  };\n}\n_s(useAuth, \"LJz3imMVe3CrUIKyplgcEyBQ50A=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","useAuth","_s","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","navigate","userData","sessionStorage","getItem","parsedData","JSON","parse","id","name","console","error","removeItem","login","username","password","response","fetch","method","headers","body","stringify","ok","errorData","json","success","message","data","user","setItem","logout"],"sources":["/home/anton/laba4/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nexport function useAuth() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  // Восстановление состояния после перезагрузки страницы\n  useEffect(() => {\n    const userData = sessionStorage.getItem('user');\n\n    if (userData) {\n      try {\n        // Попытка распарсить данные из sessionStorage\n        const parsedData = JSON.parse(userData);\n\n        // Проверяем, что данные содержат необходимые поля\n        if (parsedData && typeof parsedData === 'object' && parsedData.id && parsedData.name) {\n          setCurrentUser(parsedData);\n          setIsAuthenticated(true);\n        } else {\n          console.error('Invalid user data in sessionStorage:', parsedData);\n          sessionStorage.removeItem('user'); // Удаляем поврежденные данные\n        }\n      } catch (error) {\n        console.error('Failed to parse user data from sessionStorage:', error);\n        sessionStorage.removeItem('user'); // Удаляем поврежденные данные\n      }\n    }\n  }, []);\n\n  // Логика входа через API\n  const login = async (username, password) => {\n    try {\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name: username, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        return { success: false, error: errorData.message || 'Invalid credentials' };\n      }\n\n      const data = await response.json();\n\n      // Проверяем, что сервер вернул корректные данные\n      if (data.user && typeof data.user === 'object' && data.user.id && data.user.name) {\n        sessionStorage.setItem('user', JSON.stringify(data.user)); // Сохраняем данные пользователя\n        setCurrentUser(data.user);\n        setIsAuthenticated(true);\n        return { success: true };\n      } else {\n        console.error('Invalid user data received from server:', data);\n        return { success: false, error: 'Server returned invalid data' };\n      }\n    } catch (error) {\n      console.error('An unexpected error occurred during login:', error);\n      return { success: false, error: 'An unexpected error occurred' };\n    }\n  };\n\n  // Логика выхода\n  const logout = () => {\n    sessionStorage.removeItem('user'); // Удаляем данные из sessionStorage\n    setCurrentUser(null); // Сбрасываем currentUser\n    setIsAuthenticated(false); // Сбрасываем isAuthenticated\n    navigate('/auth'); // Перенаправляем на страницу входа\n  };\n\n  return {\n    isAuthenticated,\n    currentUser,\n    login,\n    logout,\n  };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACO,eAAe,EAAEC,kBAAkB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMS,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACd,MAAMS,QAAQ,GAAGC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;IAE/C,IAAIF,QAAQ,EAAE;MACZ,IAAI;QACF;QACA,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;;QAEvC;QACA,IAAIG,UAAU,IAAI,OAAOA,UAAU,KAAK,QAAQ,IAAIA,UAAU,CAACG,EAAE,IAAIH,UAAU,CAACI,IAAI,EAAE;UACpFX,cAAc,CAACO,UAAU,CAAC;UAC1BL,kBAAkB,CAAC,IAAI,CAAC;QAC1B,CAAC,MAAM;UACLU,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEN,UAAU,CAAC;UACjEF,cAAc,CAACS,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QACrC;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;QACtER,cAAc,CAACS,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;MACrC;IACF;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;QAC9DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEd,IAAI,CAACe,SAAS,CAAC;UAAEZ,IAAI,EAAEK,QAAQ;UAAEC;QAAS,CAAC;MACnD,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACM,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;QACvC,OAAO;UAAEC,OAAO,EAAE,KAAK;UAAEd,KAAK,EAAEY,SAAS,CAACG,OAAO,IAAI;QAAsB,CAAC;MAC9E;MAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACQ,IAAI,CAAC,CAAC;;MAElC;MACA,IAAIG,IAAI,CAACC,IAAI,IAAI,OAAOD,IAAI,CAACC,IAAI,KAAK,QAAQ,IAAID,IAAI,CAACC,IAAI,CAACpB,EAAE,IAAImB,IAAI,CAACC,IAAI,CAACnB,IAAI,EAAE;QAChFN,cAAc,CAAC0B,OAAO,CAAC,MAAM,EAAEvB,IAAI,CAACe,SAAS,CAACM,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3D9B,cAAc,CAAC6B,IAAI,CAACC,IAAI,CAAC;QACzB5B,kBAAkB,CAAC,IAAI,CAAC;QACxB,OAAO;UAAEyB,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACLf,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEgB,IAAI,CAAC;QAC9D,OAAO;UAAEF,OAAO,EAAE,KAAK;UAAEd,KAAK,EAAE;QAA+B,CAAC;MAClE;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,OAAO;QAAEc,OAAO,EAAE,KAAK;QAAEd,KAAK,EAAE;MAA+B,CAAC;IAClE;EACF,CAAC;;EAED;EACA,MAAMmB,MAAM,GAAGA,CAAA,KAAM;IACnB3B,cAAc,CAACS,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACnCd,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IACtBE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3BC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACrB,CAAC;EAED,OAAO;IACLF,eAAe;IACfF,WAAW;IACXgB,KAAK;IACLiB;EACF,CAAC;AACH;AAAClC,EAAA,CA7EeD,OAAO;EAAA,QAGJD,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}