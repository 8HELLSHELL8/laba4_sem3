{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Моковые данные пользователей (в реальном приложении это будет запрос к API)\nconst mockUsers = [{\n  id: 1,\n  email: 'user',\n  password: '123'\n}, {\n  id: 2,\n  email: 'admin',\n  password: '123'\n}];\nexport function useAuth() {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const userData = sessionStorage.getItem('user');\n    if (userData) {\n      setCurrentUser(JSON.parse(userData));\n      setIsAuthenticated(true);\n    }\n  }, []);\n  const login = async (username, password) => {\n    try {\n      // Здесь должен быть реальный запрос к API\n      const user = mockUsers.find(u => u.email === username && u.password === password);\n      if (user) {\n        sessionStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user); // Обновляем currentUser\n        setIsAuthenticated(true); // Обновляем isAuthenticated\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: 'Неверный логин или пароль'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Ошибка сервера'\n      };\n    }\n  };\n  const logout = () => {\n    sessionStorage.removeItem('user');\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n    navigate('/auth');\n  };\n  return {\n    isAuthenticated,\n    currentUser,\n    login,\n    logout\n  };\n}\n_s(useAuth, \"LJz3imMVe3CrUIKyplgcEyBQ50A=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useEffect","useNavigate","mockUsers","id","email","password","useAuth","_s","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","navigate","userData","sessionStorage","getItem","JSON","parse","login","username","user","find","u","setItem","stringify","success","error","logout","removeItem"],"sources":["/home/anton/laba4/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Моковые данные пользователей (в реальном приложении это будет запрос к API)\nconst mockUsers = [\n  { id: 1, email: 'user', password: '123' },\n  { id: 2, email: 'admin', password: '123' }\n];\n\nexport function useAuth() {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const userData = sessionStorage.getItem('user');\n    if (userData) {\n      setCurrentUser(JSON.parse(userData));\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const login = async (username, password) => {\n    try {\n      // Здесь должен быть реальный запрос к API\n      const user = mockUsers.find(u => \n        u.email === username && u.password === password\n      );\n      \n      if (user) {\n        sessionStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser(user); // Обновляем currentUser\n        setIsAuthenticated(true); // Обновляем isAuthenticated\n        return { success: true };\n      }\n      return { success: false, error: 'Неверный логин или пароль' };\n    } catch (error) {\n      return { success: false, error: 'Ошибка сервера' };\n    }\n  };\n\n  const logout = () => {\n    sessionStorage.removeItem('user');\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n    navigate('/auth');\n  };\n\n  return { \n    isAuthenticated, \n    currentUser, \n    login, \n    logout \n  };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,SAAS,GAAG,CAChB;EAAEC,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,MAAM;EAAEC,QAAQ,EAAE;AAAM,CAAC,EACzC;EAAEF,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,OAAO;EAAEC,QAAQ,EAAE;AAAM,CAAC,CAC3C;AAED,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMa,QAAQ,GAAGX,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMa,QAAQ,GAAGC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,QAAQ,EAAE;MACZJ,cAAc,CAACO,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC,CAAC;MACpCF,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEd,QAAQ,KAAK;IAC1C,IAAI;MACF;MACA,MAAMe,IAAI,GAAGlB,SAAS,CAACmB,IAAI,CAACC,CAAC,IAC3BA,CAAC,CAAClB,KAAK,KAAKe,QAAQ,IAAIG,CAAC,CAACjB,QAAQ,KAAKA,QACzC,CAAC;MAED,IAAIe,IAAI,EAAE;QACRN,cAAc,CAACS,OAAO,CAAC,MAAM,EAAEP,IAAI,CAACQ,SAAS,CAACJ,IAAI,CAAC,CAAC;QACpDX,cAAc,CAACW,IAAI,CAAC,CAAC,CAAC;QACtBT,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1B,OAAO;UAAEc,OAAO,EAAE;QAAK,CAAC;MAC1B;MACA,OAAO;QAAEA,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAA4B,CAAC;IAC/D,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAiB,CAAC;IACpD;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBb,cAAc,CAACc,UAAU,CAAC,MAAM,CAAC;IACjCnB,cAAc,CAAC,IAAI,CAAC;IACpBE,kBAAkB,CAAC,KAAK,CAAC;IACzBC,QAAQ,CAAC,OAAO,CAAC;EACnB,CAAC;EAED,OAAO;IACLF,eAAe;IACfF,WAAW;IACXU,KAAK;IACLS;EACF,CAAC;AACH;AAACpB,EAAA,CA7CeD,OAAO;EAAA,QAGJL,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}