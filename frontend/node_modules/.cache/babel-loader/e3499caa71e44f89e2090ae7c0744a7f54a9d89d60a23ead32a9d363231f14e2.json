{"ast":null,"code":"var _jsxFileName = \"/home/anton/laba4/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom'; // Removed useNavigate, not needed here\nimport axios from 'axios';\nimport AuthPage from './pages/AuthPage';\nimport NotFound from './pages/NotFound';\nimport Detail from './pages/Detail';\nimport Layout from './components/Layout'; // Corrected path assuming components folder\nimport Profile from './pages/Profile';\nimport Home from './pages/Home';\nimport './css/App.css';\n\n// Simplified ProtectedRoute - relies on props\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  isAuthenticated,\n  isLoading,\n  children\n}) => {\n  if (isLoading) {\n    // Show loading during initial app load check OR during auth state transition\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Checking authentication...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n  // If done loading and not authenticated, redirect\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/auth\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  }\n  // If done loading and authenticated, render children\n  return children;\n};\n_c = ProtectedRoute;\nfunction App() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // null: unknown, true: yes, false: no\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check authentication status only once on initial app load\n  useEffect(() => {\n    const checkInitialAuth = async () => {\n      setIsLoading(true);\n      try {\n        // Use the same endpoint your ProtectedRoute used\n        await axios.get('http://localhost:5000/api/protected', {\n          withCredentials: true\n        });\n        setIsAuthenticated(true); // User has a valid session\n      } catch (error) {\n        var _error$response;\n        // Any error (401, 403, network etc.) means not authenticated\n        setIsAuthenticated(false);\n        console.log(\"Initial auth check failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      } finally {\n        setIsLoading(false); // Finished check\n      }\n    };\n    // Only run check if auth state is currently unknown (null)\n    if (isAuthenticated === null) {\n      checkInitialAuth();\n    } else {\n      // If auth state is already known (e.g., after login/logout), don't re-check, just stop loading\n      setIsLoading(false);\n    }\n  }, [isAuthenticated]); // Re-run if isAuthenticated changes (e.g., after login/logout)\n\n  // Function for AuthPage OR Layout to call to update global auth state\n  const handleAuthChange = status => {\n    setIsAuthenticated(status);\n    // Set loading briefly during state transition if needed,\n    // but useEffect dependency handles loading state adequately now.\n    // setIsLoading(true); // Briefly set loading (optional, might cause flicker)\n  };\n\n  // --- Render Logic ---\n\n  // Optional: Global loading indicator (ProtectedRoute also handles its own)\n  // if (isLoading && isAuthenticated === null) { // Show only during initial check\n  //   return <p>Loading Application...</p>;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/auth\",\n      element:\n      // If loading initial state, wait.\n      // If done loading and authenticated, redirect away from auth.\n      // Otherwise show AuthPage.\n      isLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 23\n      }, this) : isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n        to: \"/home\",\n        replace: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(AuthPage, {\n        updateAuthState: handleAuthChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 63\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n        isAuthenticated: isAuthenticated,\n        isLoading: isLoading,\n        children: /*#__PURE__*/_jsxDEV(Layout, {\n          handleLogout: () => handleAuthChange(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/home\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"home\",\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"profile\",\n        element: /*#__PURE__*/_jsxDEV(Profile, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"detail/:id\",\n        element: /*#__PURE__*/_jsxDEV(Detail, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"*\",\n      element: /*#__PURE__*/_jsxDEV(NotFound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6M0T6wddrmS10OcFc8VlSqW6jTc=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Routes","Route","Navigate","axios","AuthPage","NotFound","Detail","Layout","Profile","Home","jsxDEV","_jsxDEV","ProtectedRoute","isAuthenticated","isLoading","children","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","App","_s","setIsAuthenticated","setIsLoading","checkInitialAuth","get","withCredentials","error","_error$response","console","log","response","data","message","handleAuthChange","status","path","element","updateAuthState","handleLogout","index","_c2","$RefreshReg$"],"sources":["/home/anton/laba4/frontend/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom'; // Removed useNavigate, not needed here\nimport axios from 'axios';\nimport AuthPage from './pages/AuthPage';\nimport NotFound from './pages/NotFound';\nimport Detail from './pages/Detail';\nimport Layout from './components/Layout'; // Corrected path assuming components folder\nimport Profile from './pages/Profile';\nimport Home from './pages/Home';\nimport './css/App.css';\n\n// Simplified ProtectedRoute - relies on props\nconst ProtectedRoute = ({ isAuthenticated, isLoading, children }) => {\n  if (isLoading) {\n    // Show loading during initial app load check OR during auth state transition\n    return <p>Checking authentication...</p>;\n  }\n  // If done loading and not authenticated, redirect\n  if (!isAuthenticated) {\n     return <Navigate to=\"/auth\" replace />;\n  }\n  // If done loading and authenticated, render children\n  return children;\n};\n\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(null); // null: unknown, true: yes, false: no\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Check authentication status only once on initial app load\n  useEffect(() => {\n    const checkInitialAuth = async () => {\n      setIsLoading(true);\n      try {\n        // Use the same endpoint your ProtectedRoute used\n        await axios.get('http://localhost:5000/api/protected', {\n          withCredentials: true,\n        });\n        setIsAuthenticated(true); // User has a valid session\n      } catch (error) {\n        // Any error (401, 403, network etc.) means not authenticated\n        setIsAuthenticated(false);\n        console.log(\"Initial auth check failed:\", error.response?.data || error.message);\n      } finally {\n        setIsLoading(false); // Finished check\n      }\n    };\n    // Only run check if auth state is currently unknown (null)\n    if (isAuthenticated === null) {\n       checkInitialAuth();\n    } else {\n       // If auth state is already known (e.g., after login/logout), don't re-check, just stop loading\n       setIsLoading(false);\n    }\n\n  }, [isAuthenticated]); // Re-run if isAuthenticated changes (e.g., after login/logout)\n\n  // Function for AuthPage OR Layout to call to update global auth state\n  const handleAuthChange = (status) => {\n    setIsAuthenticated(status);\n    // Set loading briefly during state transition if needed,\n    // but useEffect dependency handles loading state adequately now.\n    // setIsLoading(true); // Briefly set loading (optional, might cause flicker)\n  };\n\n\n  // --- Render Logic ---\n\n  // Optional: Global loading indicator (ProtectedRoute also handles its own)\n  // if (isLoading && isAuthenticated === null) { // Show only during initial check\n  //   return <p>Loading Application...</p>;\n  // }\n\n  return (\n    <Routes>\n      {/* Auth Page: Redirect to home if already logged in and done loading */}\n      <Route\n        path=\"/auth\"\n        element={\n          // If loading initial state, wait.\n          // If done loading and authenticated, redirect away from auth.\n          // Otherwise show AuthPage.\n          isLoading ? <p>Loading...</p> :\n          isAuthenticated ? <Navigate to=\"/home\" replace /> : <AuthPage updateAuthState={handleAuthChange} />\n        }\n      />\n\n      {/* Protected Routes Area */}\n      <Route\n        path=\"/\"\n        element={\n          <ProtectedRoute isAuthenticated={isAuthenticated} isLoading={isLoading}>\n             {/* Pass the handler function down to Layout */}\n            <Layout handleLogout={() => handleAuthChange(false)} />\n          </ProtectedRoute>\n        }\n      >\n        {/* Index route redirects root path '/' to '/home' */}\n        <Route index element={<Navigate to=\"/home\" replace />} />\n        <Route path=\"home\" element={<Home />} />\n        <Route path=\"profile\" element={<Profile />} />\n        {/* Ensure the detail route path matches links (e.g., /detail/:id) */}\n        <Route path=\"detail/:id\" element={<Detail />} />\n        {/* Add other protected routes here (like '/settings' if needed) */}\n         {/* <Route path=\"settings\" element={<Settings />} /> */}\n      </Route>\n\n      {/* 404 Not Found - Placed last to catch all other paths */}\n      <Route path=\"*\" element={<NotFound />} />\n    </Routes>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}